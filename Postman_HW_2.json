{
	"info": {
		"_postman_id": "8c348433-f36c-4d91-9b46-8aa737a22b75",
		"name": "Group_33_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23956572"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"\r",
							"//7. Спарсить request\r",
							"var req = request.data;\r",
							"var req_name = req.name;\r",
							"\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"console.log(\"req_name = \" + req_name)\r",
							"\r",
							"//4. Проверить, что name в ответе равно name с request (name вбить руками.)\r",
							"pm.test(\"req_resp_name(manually)_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Rustam\");\r",
							"});\r",
							"\r",
							"//8. Проверить, что name в ответе равно name с request (name забрать из request.)\r",
							"pm.test(\"req_resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var resp_age = +jsonData.age;\r",
							"var req_age = +req.age;\r",
							"\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"req_resp_age(manually)_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(26);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var resp_salary = jsonData.salary;\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"console.log(\"req_salary = \" + req_salary)\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"req_resp_salary(manually)_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(1200);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"req_resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"var resp_json = pm.response.json();\r",
							"var resp_u_family = resp_json.family;\r",
							"console.log(\"Family: \", resp_u_family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var resp_u_salary_1_5_year = resp_json.family.u_salary_1_5_year;\r",
							"pm.test(\"req_resp_salary_x4_check\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});\r",
							"\r",
							"console.log(resp_u_salary_1_5_year)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Rustam",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = jsonData.age;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"// 4. Спарсить request. (Данные из url)\r",
							"var req_u = pm.request.url.query.toObject();\r",
							"var req_name = req_u.name;\r",
							"var req_age = req_u.age;\r",
							"var req_salary = +req_u.salary;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req_resp_age_check\", function() {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"req_resp_age_check\", function() {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"var resp_u_family = jsonData.family;\r",
							"console.log(\"Family: \", resp_u_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"var resp_dog_params = [jsonData.family.pets.dog];\r",
							"pm.test(\"dog_name_params_check\", function() {\r",
							"    resp_dog_params.includes(\"name\");\r",
							"});\r",
							"\r",
							"var resp_dog = jsonData.family.pets.dog;\r",
							"console.log(\"dog: \", resp_dog);\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age_params_check\", function() {\r",
							"    resp_dog_params.includes(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"var resp_dog_name = resp_dog.name;\r",
							"pm.test(\"dog_name_value_check\", function() {\r",
							"    pm.expect(resp_dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"console.log(\"dog_name: \", resp_dog_name);\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"var resp_dog_age = resp_dog.age;\r",
							"pm.test(\"dog_age_value_check\", function() {\r",
							"    pm.expect(resp_dog_age).to.eql(4);\r",
							"});\r",
							"\r",
							"console.log(\"dog_age: \", resp_dog_age);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Rustam&salary=1200&age=26",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Rustam"
						},
						{
							"key": "salary",
							"value": "1200"
						},
						{
							"key": "age",
							"value": "26"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request. (Данные из url)\r",
							"var req_u = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = jsonData.name;\r",
							"var req_name = req_u.name;\r",
							"\r",
							"pm.test(\"req_resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"console.log(resp_name, req_name);\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var resp_age = jsonData.age;\r",
							"var req_age = +req_u.age;\r",
							"\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"console.log(resp_age, req_age);\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"var req_salary = +req_u.salary;\r",
							"\r",
							"console.log(req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"console.log(resp_salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"var resp_salary_elements = jsonData.salary;\r",
							"\r",
							"console.log(resp_salary_elements[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary_elements[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary_elements[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"req_salary == resp_salary[0] check\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary_elements[0]);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var resp_salary_element_1 = +jsonData.salary[1];\r",
							"pm.test(\"req_salary*2 == resp_salary[1] check\", function () {\r",
							"    pm.expect(req_salary * 2).to.eql(resp_salary_element_1);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var resp_salary_element_2 = +jsonData.salary[2];\r",
							"pm.test(\"req_salary*3 == resp_salary[2] check\", function () {\r",
							"    pm.expect(req_salary * 3).to.eql(resp_salary_element_2);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_salary[0]);\r",
							"\r",
							"console.log(\"resp_salary = \", resp_salary[0])\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(var i = 0; i < resp_salary.length; i++) {\r",
							"    console.log(i, resp_salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?age=26&salary=1200&name=Rustam",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1200"
						},
						{
							"key": "name",
							"value": "Rustam"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request ++\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age ++\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name ++\r",
							"\r",
							"// 4. Отправить запрос. ++\r",
							"\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"var resp_json = [jsonData];\r",
							"pm.test(\"start_qa_salary_check\", function() {\r",
							"    resp_json.includes(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months_check\", function() {\r",
							"    resp_json.includes(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function() {\r",
							"    resp_json.includes(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year_check\", function() {\r",
							"    resp_json.includes(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years_check\", function() {\r",
							"    resp_json.includes(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person_check\", function() {\r",
							"    resp_json.includes(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var resp_start_salary = jsonData.start_qa_salary;\r",
							"console.log(resp_start_salary);\r",
							"\r",
							"var req_salary = +reqData.salary;\r",
							"console.log(req_salary);\r",
							"\r",
							"pm.test(\"req_resp_start_salary_check\", function() {\r",
							"    pm.expect(resp_start_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"var resp_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"console.log(resp_salary_after_6_months);\r",
							"\r",
							"var req_slary_x2 = (reqData.salary) * 2;\r",
							"console.log(req_slary_x2);\r",
							"\r",
							"pm.test(\"req_resp_salary_after_6_months_check\", function() {\r",
							"    pm.expect(resp_salary_after_6_months).to.eql(req_slary_x2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var resp_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"console.log(resp_salary_after_12_months);\r",
							"\r",
							"var req_salary_x_2_7 = (reqData.salary) * 2.7;\r",
							"console.log(req_salary_x_2_7);\r",
							"\r",
							"pm.test(\"req_resp_salary_after_12_months_check\", function() {\r",
							"    pm.expect(resp_salary_after_12_months).to.eql(req_salary_x_2_7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var resp_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"console.log(resp_salary_after_1_5_year);\r",
							"\r",
							"var req_salary_x_3_3 = (reqData.salary) * 3.3;\r",
							"console.log(req_salary_x_3_3);\r",
							"\r",
							"pm.test(\"req_resp_start_salary_check\", function() {\r",
							"    pm.expect(resp_salary_after_1_5_year).to.eql(req_salary_x_3_3);\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var resp_salary_after_3_5_year = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"console.log(resp_salary_after_3_5_year);\r",
							"\r",
							"var req_salary_x_3_8 = (reqData.salary) * 3.8;\r",
							"console.log(req_salary_x_3_8);\r",
							"\r",
							"pm.test(\"req_resp_start_salary_check\", function() {\r",
							"    pm.expect(resp_salary_after_3_5_year).to.eql(req_salary_x_3_8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var resp_u_name_1_element = jsonData.person.u_name[1];\r",
							"\r",
							"pm.test(\"req_resp_salary_check\", function () {\r",
							"    pm.expect(+reqData.salary).to.eql(resp_u_name_1_element);\r",
							"});\r",
							"\r",
							"console.log(resp_u_name_1_element);\r",
							"console.log(+reqData.salary);\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var resp_u_age = jsonData.person.u_age;\r",
							"var req_age = +reqData.age;\r",
							"\r",
							"console.log(resp_u_age, req_age);\r",
							"\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_u_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"var resp_salary_5_years = jsonData.person.u_salary_5_years;\r",
							"var req_salary_x_4_2 = reqData.salary * 4.2;\r",
							"\r",
							"console.log(resp_salary_5_years, req_salary_x_4_2);\r",
							"\r",
							"pm.test(\"req_resp_salary_5_years_check\", function () {\r",
							"    pm.expect(req_salary_x_4_2).to.eql(resp_salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// for (var i of (resp_json.person)) {\r",
							"//     console.log(i, resp_json.person[i])\r",
							"//     if (typeof(i) == 'object') {\r",
							"//         for (var ii of i) {\r",
							"//             console.log(ii);\r",
							"//         }\r",
							"\r",
							"//     console.log(resp_json.person[i])\r",
							"\r",
							"//     }\r",
							"// }\r",
							"\r",
							"\r",
							"// var resp_person = Object.values(jsonData.person);\r",
							"// console.log(\"resp_person\", resp_person);\r",
							"\r",
							"// for (var i of [resp_person]){\r",
							"//     // console.log(\"typeof_i\", typeof i)\r",
							"//     var resp_person = jsonData.person[i];\r",
							"\r",
							"//     // console.log(\"typeof_resp_person\", typeof resp_person);\r",
							"\r",
							"//     if (typeof resp_person == 'object'){\r",
							"//         for (var ii of resp_person){\r",
							"//             console.log(\"resp_u_name :\", ii);\r",
							"//         }\r",
							"//     }\r",
							"\r",
							"// }\r",
							"\r",
							"\r",
							"var jsonDataPerson = pm.response.json().person;\r",
							"for (var i in jsonDataPerson) {\r",
							"    console.log('resp_person', i, '=', jsonDataPerson[i]);\r",
							"    if (typeof (jsonDataPerson[i]) == 'object') {\r",
							"        for (var item in jsonDataPerson[i]) {\r",
							"            console.log('inner item =', jsonDataPerson[i][item]);\r",
							"        }\r",
							"    }\r",
							"    \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}